package com.trainmanagement.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AdminAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdminAllPropertiesEquals(Admin expected, Admin actual) {
        assertAdminAutoGeneratedPropertiesEquals(expected, actual);
        assertAdminAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdminAllUpdatablePropertiesEquals(Admin expected, Admin actual) {
        assertAdminUpdatableFieldsEquals(expected, actual);
        assertAdminUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdminAutoGeneratedPropertiesEquals(Admin expected, Admin actual) {
        assertThat(actual)
            .as("Verify Admin auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdminUpdatableFieldsEquals(Admin expected, Admin actual) {
        assertThat(actual)
            .as("Verify Admin relevant properties")
            .satisfies(a -> assertThat(a.getAdminId()).as("check adminId").isEqualTo(expected.getAdminId()))
            .satisfies(a -> assertThat(a.getUsername()).as("check username").isEqualTo(expected.getUsername()))
            .satisfies(a -> assertThat(a.getPassword()).as("check password").isEqualTo(expected.getPassword()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdminUpdatableRelationshipsEquals(Admin expected, Admin actual) {
        // empty method
    }
}
