package com.trainmanagement.domain;

import static com.trainmanagement.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TrainAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrainAllPropertiesEquals(Train expected, Train actual) {
        assertTrainAutoGeneratedPropertiesEquals(expected, actual);
        assertTrainAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrainAllUpdatablePropertiesEquals(Train expected, Train actual) {
        assertTrainUpdatableFieldsEquals(expected, actual);
        assertTrainUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrainAutoGeneratedPropertiesEquals(Train expected, Train actual) {
        assertThat(actual)
            .as("Verify Train auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrainUpdatableFieldsEquals(Train expected, Train actual) {
        assertThat(actual)
            .as("Verify Train relevant properties")
            .satisfies(a -> assertThat(a.getTrainNumber()).as("check trainNumber").isEqualTo(expected.getTrainNumber()))
            .satisfies(a -> assertThat(a.getTrainName()).as("check trainName").isEqualTo(expected.getTrainName()))
            .satisfies(a -> assertThat(a.getOrigin()).as("check origin").isEqualTo(expected.getOrigin()))
            .satisfies(a -> assertThat(a.getDestination()).as("check destination").isEqualTo(expected.getDestination()))
            .satisfies(a -> assertThat(a.getIntermediateStop()).as("check intermediateStop").isEqualTo(expected.getIntermediateStop()))
            .satisfies(a -> assertThat(a.getServiceStartDate()).as("check serviceStartDate").isEqualTo(expected.getServiceStartDate()))
            .satisfies(a -> assertThat(a.getServiceEndDate()).as("check serviceEndDate").isEqualTo(expected.getServiceEndDate()))
            .satisfies(a -> assertThat(a.getServiceType()).as("check serviceType").isEqualTo(expected.getServiceType()))
            .satisfies(a -> assertThat(a.getDepartureTime()).as("check departureTime").isEqualTo(expected.getDepartureTime()))
            .satisfies(a -> assertThat(a.getArrivalTime()).as("check arrivalTime").isEqualTo(expected.getArrivalTime()))
            .satisfies(a ->
                assertThat(a.getBasicPrice())
                    .as("check basicPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getBasicPrice())
            )
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrainUpdatableRelationshipsEquals(Train expected, Train actual) {
        // empty method
    }
}
