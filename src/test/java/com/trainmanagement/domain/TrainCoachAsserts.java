package com.trainmanagement.domain;

import static com.trainmanagement.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TrainCoachAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrainCoachAllPropertiesEquals(TrainCoach expected, TrainCoach actual) {
        assertTrainCoachAutoGeneratedPropertiesEquals(expected, actual);
        assertTrainCoachAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrainCoachAllUpdatablePropertiesEquals(TrainCoach expected, TrainCoach actual) {
        assertTrainCoachUpdatableFieldsEquals(expected, actual);
        assertTrainCoachUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrainCoachAutoGeneratedPropertiesEquals(TrainCoach expected, TrainCoach actual) {
        assertThat(actual)
            .as("Verify TrainCoach auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrainCoachUpdatableFieldsEquals(TrainCoach expected, TrainCoach actual) {
        assertThat(actual)
            .as("Verify TrainCoach relevant properties")
            .satisfies(a -> assertThat(a.getTrainNumber()).as("check trainNumber").isEqualTo(expected.getTrainNumber()))
            .satisfies(a -> assertThat(a.getSeatCapacity()).as("check seatCapacity").isEqualTo(expected.getSeatCapacity()))
            .satisfies(a -> assertThat(a.getAvailableSeats()).as("check availableSeats").isEqualTo(expected.getAvailableSeats()))
            .satisfies(a ->
                assertThat(a.getFarePrice()).as("check farePrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getFarePrice())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrainCoachUpdatableRelationshipsEquals(TrainCoach expected, TrainCoach actual) {
        assertThat(actual)
            .as("Verify TrainCoach relationships")
            .satisfies(a -> assertThat(a.getCoachType()).as("check coachType").isEqualTo(expected.getCoachType()))
            .satisfies(a -> assertThat(a.getTrain()).as("check train").isEqualTo(expected.getTrain()));
    }
}
