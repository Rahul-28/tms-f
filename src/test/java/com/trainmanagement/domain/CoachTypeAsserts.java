package com.trainmanagement.domain;

import static com.trainmanagement.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CoachTypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCoachTypeAllPropertiesEquals(CoachType expected, CoachType actual) {
        assertCoachTypeAutoGeneratedPropertiesEquals(expected, actual);
        assertCoachTypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCoachTypeAllUpdatablePropertiesEquals(CoachType expected, CoachType actual) {
        assertCoachTypeUpdatableFieldsEquals(expected, actual);
        assertCoachTypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCoachTypeAutoGeneratedPropertiesEquals(CoachType expected, CoachType actual) {
        assertThat(actual)
            .as("Verify CoachType auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCoachTypeUpdatableFieldsEquals(CoachType expected, CoachType actual) {
        assertThat(actual)
            .as("Verify CoachType relevant properties")
            .satisfies(a -> assertThat(a.getCoachId()).as("check coachId").isEqualTo(expected.getCoachId()))
            .satisfies(a -> assertThat(a.getCoachName()).as("check coachName").isEqualTo(expected.getCoachName()))
            .satisfies(a -> assertThat(a.getSeatCapacity()).as("check seatCapacity").isEqualTo(expected.getSeatCapacity()))
            .satisfies(a ->
                assertThat(a.getFareMultiplier())
                    .as("check fareMultiplier")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getFareMultiplier())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCoachTypeUpdatableRelationshipsEquals(CoachType expected, CoachType actual) {
        // empty method
    }
}
