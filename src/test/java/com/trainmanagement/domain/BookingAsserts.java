package com.trainmanagement.domain;

import static com.trainmanagement.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BookingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingAllPropertiesEquals(Booking expected, Booking actual) {
        assertBookingAutoGeneratedPropertiesEquals(expected, actual);
        assertBookingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingAllUpdatablePropertiesEquals(Booking expected, Booking actual) {
        assertBookingUpdatableFieldsEquals(expected, actual);
        assertBookingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingAutoGeneratedPropertiesEquals(Booking expected, Booking actual) {
        assertThat(actual)
            .as("Verify Booking auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingUpdatableFieldsEquals(Booking expected, Booking actual) {
        assertThat(actual)
            .as("Verify Booking relevant properties")
            .satisfies(a -> assertThat(a.getPnrNumber()).as("check pnrNumber").isEqualTo(expected.getPnrNumber()))
            .satisfies(a -> assertThat(a.getBookingDate()).as("check bookingDate").isEqualTo(expected.getBookingDate()))
            .satisfies(a -> assertThat(a.getTravellingDate()).as("check travellingDate").isEqualTo(expected.getTravellingDate()))
            .satisfies(a -> assertThat(a.getBoardingStation()).as("check boardingStation").isEqualTo(expected.getBoardingStation()))
            .satisfies(a -> assertThat(a.getDestinationStation()).as("check destinationStation").isEqualTo(expected.getDestinationStation())
            )
            .satisfies(a -> assertThat(a.getBoardingTime()).as("check boardingTime").isEqualTo(expected.getBoardingTime()))
            .satisfies(a -> assertThat(a.getArrivalTime()).as("check arrivalTime").isEqualTo(expected.getArrivalTime()))
            .satisfies(a ->
                assertThat(a.getTotalFare()).as("check totalFare").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTotalFare())
            )
            .satisfies(a -> assertThat(a.getBookingStatus()).as("check bookingStatus").isEqualTo(expected.getBookingStatus()))
            .satisfies(a -> assertThat(a.getModeOfPayment()).as("check modeOfPayment").isEqualTo(expected.getModeOfPayment()))
            .satisfies(a -> assertThat(a.getAdditionalServices()).as("check additionalServices").isEqualTo(expected.getAdditionalServices())
            )
            .satisfies(a -> assertThat(a.getCoachNumber()).as("check coachNumber").isEqualTo(expected.getCoachNumber()))
            .satisfies(a -> assertThat(a.getSeatNumber()).as("check seatNumber").isEqualTo(expected.getSeatNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookingUpdatableRelationshipsEquals(Booking expected, Booking actual) {
        assertThat(actual)
            .as("Verify Booking relationships")
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()))
            .satisfies(a -> assertThat(a.getTrain()).as("check train").isEqualTo(expected.getTrain()));
    }
}
