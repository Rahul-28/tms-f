package com.trainmanagement.domain;

import static com.trainmanagement.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PaymentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentAllPropertiesEquals(Payment expected, Payment actual) {
        assertPaymentAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentAllUpdatablePropertiesEquals(Payment expected, Payment actual) {
        assertPaymentUpdatableFieldsEquals(expected, actual);
        assertPaymentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentAutoGeneratedPropertiesEquals(Payment expected, Payment actual) {
        assertThat(actual)
            .as("Verify Payment auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentUpdatableFieldsEquals(Payment expected, Payment actual) {
        assertThat(actual)
            .as("Verify Payment relevant properties")
            .satisfies(a -> assertThat(a.getPaymentId()).as("check paymentId").isEqualTo(expected.getPaymentId()))
            .satisfies(a -> assertThat(a.getTransactionId()).as("check transactionId").isEqualTo(expected.getTransactionId()))
            .satisfies(a -> assertThat(a.getReceiptNumber()).as("check receiptNumber").isEqualTo(expected.getReceiptNumber()))
            .satisfies(a -> assertThat(a.getTransactionDate()).as("check transactionDate").isEqualTo(expected.getTransactionDate()))
            .satisfies(a -> assertThat(a.getTransactionType()).as("check transactionType").isEqualTo(expected.getTransactionType()))
            .satisfies(a ->
                assertThat(a.getTransactionAmount())
                    .as("check transactionAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTransactionAmount())
            )
            .satisfies(a -> assertThat(a.getTransactionStatus()).as("check transactionStatus").isEqualTo(expected.getTransactionStatus()))
            .satisfies(a -> assertThat(a.getCardNumber()).as("check cardNumber").isEqualTo(expected.getCardNumber()))
            .satisfies(a -> assertThat(a.getExpiryDate()).as("check expiryDate").isEqualTo(expected.getExpiryDate()))
            .satisfies(a -> assertThat(a.getCvv()).as("check cvv").isEqualTo(expected.getCvv()))
            .satisfies(a -> assertThat(a.getCardholderName()).as("check cardholderName").isEqualTo(expected.getCardholderName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentUpdatableRelationshipsEquals(Payment expected, Payment actual) {
        assertThat(actual)
            .as("Verify Payment relationships")
            .satisfies(a -> assertThat(a.getBooking()).as("check booking").isEqualTo(expected.getBooking()));
    }
}
