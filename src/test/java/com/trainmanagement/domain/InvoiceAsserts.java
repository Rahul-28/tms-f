package com.trainmanagement.domain;

import static com.trainmanagement.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class InvoiceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceAllPropertiesEquals(Invoice expected, Invoice actual) {
        assertInvoiceAutoGeneratedPropertiesEquals(expected, actual);
        assertInvoiceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceAllUpdatablePropertiesEquals(Invoice expected, Invoice actual) {
        assertInvoiceUpdatableFieldsEquals(expected, actual);
        assertInvoiceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceAutoGeneratedPropertiesEquals(Invoice expected, Invoice actual) {
        assertThat(actual)
            .as("Verify Invoice auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceUpdatableFieldsEquals(Invoice expected, Invoice actual) {
        assertThat(actual)
            .as("Verify Invoice relevant properties")
            .satisfies(a -> assertThat(a.getInvoiceNumber()).as("check invoiceNumber").isEqualTo(expected.getInvoiceNumber()))
            .satisfies(a -> assertThat(a.getPaymentId()).as("check paymentId").isEqualTo(expected.getPaymentId()))
            .satisfies(a -> assertThat(a.getTransactionId()).as("check transactionId").isEqualTo(expected.getTransactionId()))
            .satisfies(a -> assertThat(a.getReceiptNumber()).as("check receiptNumber").isEqualTo(expected.getReceiptNumber()))
            .satisfies(a -> assertThat(a.getInvoiceDate()).as("check invoiceDate").isEqualTo(expected.getInvoiceDate()))
            .satisfies(a -> assertThat(a.getTransactionType()).as("check transactionType").isEqualTo(expected.getTransactionType()))
            .satisfies(a ->
                assertThat(a.getTransactionAmount())
                    .as("check transactionAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTransactionAmount())
            )
            .satisfies(a -> assertThat(a.getTransactionStatus()).as("check transactionStatus").isEqualTo(expected.getTransactionStatus()))
            .satisfies(a -> assertThat(a.getCustomerDetails()).as("check customerDetails").isEqualTo(expected.getCustomerDetails()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvoiceUpdatableRelationshipsEquals(Invoice expected, Invoice actual) {
        assertThat(actual)
            .as("Verify Invoice relationships")
            .satisfies(a -> assertThat(a.getPayment()).as("check payment").isEqualTo(expected.getPayment()));
    }
}
